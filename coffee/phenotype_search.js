// Generated by CoffeeScript 1.9.2
(function() {
  var AlgoliaPhenotypeSearch, HITS_PER_PAGE, PhenotypeSearch, SolrPhenotypeSearch,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  HITS_PER_PAGE = 50;

  PhenotypeSearch = (function() {
    function PhenotypeSearch() {
      this.hitTemplate = Hogan.compile($('#hit-template').text());
    }

    PhenotypeSearch.prototype.hits = function(content) {};

    PhenotypeSearch.prototype.onSuccess = function(content) {
      this.renderHits(content);
      return $("#filter").css('background-color', '#fff');
    };

    PhenotypeSearch.prototype.onError = function(err) {
      console.log(err);
      return $("#filter").css('background-color', '#fdd');
    };

    PhenotypeSearch.prototype.renderHits = function(content) {
      var header, header_fields, hit, hits, hitsHtml, i, j, len, x;
      hitsHtml = '<table id="trait_table">';
      header_fields = ['Record ID', 'Description', 'Authors', 'Year', 'LRS', 'LRS location', 'Additive effect'];
      header = ((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = header_fields.length; j < len; j++) {
          x = header_fields[j];
          results.push('<th>' + x + '</th>');
        }
        return results;
      })()).join('');
      hitsHtml += '<thead><tr>' + header + '</tr></thead><tbody>';
      hits = this.hits(content);
      for (i = j = 0, len = hits.length; j < len; i = ++j) {
        hit = hits[i];
        hitsHtml += this.hitTemplate.render(hit);
      }
      hitsHtml += '</tbody></table>';
      if (hits.length === 0) {
        hitsHtml = '<p id="no-hits">We didn\'t find any phenotypes for your search.</p>';
      }
      $("#hits").html(hitsHtml);
      return $('#trait_table').dataTable({
        columns: [
          {
            type: "num-html",
            swidth: "5%"
          }, {
            sWidth: "35%"
          }, {
            sWidth: "20%"
          }, null, {
            type: "num"
          }, {
            type: "natural"
          }, {
            type: "num"
          }
        ],
        sDom: "tir",
        iDisplayLength: -1,
        autoWidth: true,
        bLengthChange: true,
        bDeferRender: true,
        bSortClasses: false
      });
    };

    return PhenotypeSearch;

  })();

  AlgoliaPhenotypeSearch = (function(superClass) {
    extend(AlgoliaPhenotypeSearch, superClass);

    function AlgoliaPhenotypeSearch() {
      AlgoliaPhenotypeSearch.__super__.constructor.apply(this, arguments);
      this.app_id = "A6LX075BLV";
      this.index_name = "phenotype";
      this.search_only_api_key = "164c63eedb7efb07d13443812d592944";
      this.client = algoliasearch(this.app_id, this.search_only_api_key);
      this.pheno_index = this.client.initIndex(this.index_name);
      this.params = {
        hitsPerPage: HITS_PER_PAGE,
        advancedSyntax: true
      };
    }

    AlgoliaPhenotypeSearch.prototype.performSearch = function() {
      var query, query_params;
      query = $("#q").val();
      query_params = $.extend({}, this.params);
      query_params.numericFilters = $("#filter").val();
      return this.pheno_index.search(query, query_params).then((function(_this) {
        return function(c) {
          return _this.onSuccess(c);
        };
      })(this))["catch"]((function(_this) {
        return function(e) {
          return _this.onError(e);
        };
      })(this));
    };

    AlgoliaPhenotypeSearch.prototype.hits = function(content) {
      var e, h, hit, j, len, ref;
      h = [];
      ref = content.hits;
      for (j = 0, len = ref.length; j < len; j++) {
        hit = ref[j];
        hit.description = hit._highlightResult.Post_publication_description.value;
        hit.LRS = parseFloat(hit.LRS.toFixed(3));
        if (hit.Mb > 1e6) {
          hit.Mb /= 1e6;
        }
        hit.LRS_location = "Chr " + hit.Chr + ": " + (hit.Mb.toFixed(6)) + " Mb";
        try {
          hit.additive = parseFloat(hit.additive).toFixed(3);
        } catch (_error) {
          e = _error;
          hit.additive = null;
        }
        hit.Authors = hit._highlightResult.Authors.value;
        hit.id = hit.objectID;
        h.push(hit);
      }
      return h;
    };

    return AlgoliaPhenotypeSearch;

  })(PhenotypeSearch);

  SolrPhenotypeSearch = (function(superClass) {
    extend(SolrPhenotypeSearch, superClass);

    function SolrPhenotypeSearch() {
      SolrPhenotypeSearch.__super__.constructor.apply(this, arguments);
    }

    SolrPhenotypeSearch.prototype.performSearch = function() {
      var query;
      query = $("#q").val();
      return $.getJSON('http://localhost:8983/solr/phenotypes/select?q=' + query + ("&wt=json&rows=" + HITS_PER_PAGE + "&hl=true&hl.fl=*&json.wrf=?"), (function(_this) {
        return function(result) {
          if (result.response) {
            return _this.onSuccess(result);
          } else {
            return _this.onError(result.error.msg);
          }
        };
      })(this));
    };

    SolrPhenotypeSearch.prototype.hits = function(content) {
      var e, h, hit, hlField, j, len, ref;
      hlField = (function(_this) {
        return function(doc, field) {
          var hl;
          hl = content.highlighting[doc.id];
          if (hl && hl[field]) {
            return hl[field];
          } else {
            return doc[field];
          }
        };
      })(this);
      h = [];
      ref = content.response.docs;
      for (j = 0, len = ref.length; j < len; j++) {
        hit = ref[j];
        hit.description = hlField(hit, 'Post_publication_description');
        hit.LRS = parseFloat(hit.LRS.toFixed(3));
        if (hit.Mb > 1e6) {
          hit.Mb /= 1e6;
        }
        hit.LRS_location = "Chr " + hit.Chr + ": " + (hit.Mb.toFixed(6)) + " Mb";
        try {
          hit.additive = parseFloat(hit.additive).toFixed(3);
        } catch (_error) {
          e = _error;
          hit.additive = null;
        }
        hit.Authors = hlField(hit, 'Authors');
        h.push(hit);
      }
      return h;
    };

    return SolrPhenotypeSearch;

  })(PhenotypeSearch);

  $(function() {
    var client;
    client = new AlgoliaPhenotypeSearch;
    $("#q").on('keyup', (function(_this) {
      return function() {
        return client.performSearch();
      };
    })(this));
    $("#filter").on('keyup', (function(_this) {
      return function() {
        return client.performSearch();
      };
    })(this));
    return $("#q").focus();
  });

}).call(this);
